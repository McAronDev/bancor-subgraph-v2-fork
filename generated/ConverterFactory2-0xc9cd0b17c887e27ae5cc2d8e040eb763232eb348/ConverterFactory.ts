// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewConverter extends ethereum.Event {
  get params(): NewConverter__Params {
    return new NewConverter__Params(this);
  }
}

export class NewConverter__Params {
  _event: NewConverter;

  constructor(event: NewConverter) {
    this._event = event;
  }

  get _type(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get _converter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnerUpdate extends ethereum.Event {
  get params(): OwnerUpdate__Params {
    return new OwnerUpdate__Params(this);
  }
}

export class OwnerUpdate__Params {
  _event: OwnerUpdate;

  constructor(event: OwnerUpdate) {
    this._event = event;
  }

  get _prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ConverterFactory extends ethereum.SmartContract {
  static bind(address: Address): ConverterFactory {
    return new ConverterFactory("ConverterFactory", address);
  }

  createConverter(
    _type: i32,
    _anchor: Address,
    _registry: Address,
    _maxConversionFee: BigInt
  ): Address {
    let result = super.call(
      "createConverter",
      "createConverter(uint16,address,address,uint32):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_type)),
        ethereum.Value.fromAddress(_anchor),
        ethereum.Value.fromAddress(_registry),
        ethereum.Value.fromUnsignedBigInt(_maxConversionFee)
      ]
    );

    return result[0].toAddress();
  }

  try_createConverter(
    _type: i32,
    _anchor: Address,
    _registry: Address,
    _maxConversionFee: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createConverter",
      "createConverter(uint16,address,address,uint32):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_type)),
        ethereum.Value.fromAddress(_anchor),
        ethereum.Value.fromAddress(_registry),
        ethereum.Value.fromUnsignedBigInt(_maxConversionFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createAnchor(
    _converterType: i32,
    _name: string,
    _symbol: string,
    _decimals: i32
  ): Address {
    let result = super.call(
      "createAnchor",
      "createAnchor(uint16,string,string,uint8):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_converterType)),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_decimals))
      ]
    );

    return result[0].toAddress();
  }

  try_createAnchor(
    _converterType: i32,
    _name: string,
    _symbol: string,
    _decimals: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createAnchor",
      "createAnchor(uint16,string,string,uint8):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_converterType)),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_decimals))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  converterFactories(param0: i32): Address {
    let result = super.call(
      "converterFactories",
      "converterFactories(uint16):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return result[0].toAddress();
  }

  try_converterFactories(param0: i32): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "converterFactories",
      "converterFactories(uint16):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  anchorFactories(param0: i32): Address {
    let result = super.call(
      "anchorFactories",
      "anchorFactories(uint16):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return result[0].toAddress();
  }

  try_anchorFactories(param0: i32): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "anchorFactories",
      "anchorFactories(uint16):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  customFactories(param0: i32): Address {
    let result = super.call(
      "customFactories",
      "customFactories(uint16):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return result[0].toAddress();
  }

  try_customFactories(param0: i32): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "customFactories",
      "customFactories(uint16):(address)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newOwner(): Address {
    let result = super.call("newOwner", "newOwner():(address)", []);

    return result[0].toAddress();
  }

  try_newOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("newOwner", "newOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class RegisterTypedConverterFactoryCall extends ethereum.Call {
  get inputs(): RegisterTypedConverterFactoryCall__Inputs {
    return new RegisterTypedConverterFactoryCall__Inputs(this);
  }

  get outputs(): RegisterTypedConverterFactoryCall__Outputs {
    return new RegisterTypedConverterFactoryCall__Outputs(this);
  }
}

export class RegisterTypedConverterFactoryCall__Inputs {
  _call: RegisterTypedConverterFactoryCall;

  constructor(call: RegisterTypedConverterFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterTypedConverterFactoryCall__Outputs {
  _call: RegisterTypedConverterFactoryCall;

  constructor(call: RegisterTypedConverterFactoryCall) {
    this._call = call;
  }
}

export class CreateConverterCall extends ethereum.Call {
  get inputs(): CreateConverterCall__Inputs {
    return new CreateConverterCall__Inputs(this);
  }

  get outputs(): CreateConverterCall__Outputs {
    return new CreateConverterCall__Outputs(this);
  }
}

export class CreateConverterCall__Inputs {
  _call: CreateConverterCall;

  constructor(call: CreateConverterCall) {
    this._call = call;
  }

  get _type(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _anchor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _registry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _maxConversionFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateConverterCall__Outputs {
  _call: CreateConverterCall;

  constructor(call: CreateConverterCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateAnchorCall extends ethereum.Call {
  get inputs(): CreateAnchorCall__Inputs {
    return new CreateAnchorCall__Inputs(this);
  }

  get outputs(): CreateAnchorCall__Outputs {
    return new CreateAnchorCall__Outputs(this);
  }
}

export class CreateAnchorCall__Inputs {
  _call: CreateAnchorCall;

  constructor(call: CreateAnchorCall) {
    this._call = call;
  }

  get _converterType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _decimals(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class CreateAnchorCall__Outputs {
  _call: CreateAnchorCall;

  constructor(call: CreateAnchorCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class RegisterTypedConverterCustomFactoryCall extends ethereum.Call {
  get inputs(): RegisterTypedConverterCustomFactoryCall__Inputs {
    return new RegisterTypedConverterCustomFactoryCall__Inputs(this);
  }

  get outputs(): RegisterTypedConverterCustomFactoryCall__Outputs {
    return new RegisterTypedConverterCustomFactoryCall__Outputs(this);
  }
}

export class RegisterTypedConverterCustomFactoryCall__Inputs {
  _call: RegisterTypedConverterCustomFactoryCall;

  constructor(call: RegisterTypedConverterCustomFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterTypedConverterCustomFactoryCall__Outputs {
  _call: RegisterTypedConverterCustomFactoryCall;

  constructor(call: RegisterTypedConverterCustomFactoryCall) {
    this._call = call;
  }
}

export class RegisterTypedConverterAnchorFactoryCall extends ethereum.Call {
  get inputs(): RegisterTypedConverterAnchorFactoryCall__Inputs {
    return new RegisterTypedConverterAnchorFactoryCall__Inputs(this);
  }

  get outputs(): RegisterTypedConverterAnchorFactoryCall__Outputs {
    return new RegisterTypedConverterAnchorFactoryCall__Outputs(this);
  }
}

export class RegisterTypedConverterAnchorFactoryCall__Inputs {
  _call: RegisterTypedConverterAnchorFactoryCall;

  constructor(call: RegisterTypedConverterAnchorFactoryCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterTypedConverterAnchorFactoryCall__Outputs {
  _call: RegisterTypedConverterAnchorFactoryCall;

  constructor(call: RegisterTypedConverterAnchorFactoryCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
