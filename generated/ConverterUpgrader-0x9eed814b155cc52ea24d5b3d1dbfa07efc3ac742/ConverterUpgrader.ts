// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ConverterOwned extends ethereum.Event {
  get params(): ConverterOwned__Params {
    return new ConverterOwned__Params(this);
  }
}

export class ConverterOwned__Params {
  _event: ConverterOwned;

  constructor(event: ConverterOwned) {
    this._event = event;
  }

  get _converter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ConverterUpgrade extends ethereum.Event {
  get params(): ConverterUpgrade__Params {
    return new ConverterUpgrade__Params(this);
  }
}

export class ConverterUpgrade__Params {
  _event: ConverterUpgrade;

  constructor(event: ConverterUpgrade) {
    this._event = event;
  }

  get _oldConverter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newConverter(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerUpdate extends ethereum.Event {
  get params(): OwnerUpdate__Params {
    return new OwnerUpdate__Params(this);
  }
}

export class OwnerUpdate__Params {
  _event: OwnerUpdate;

  constructor(event: OwnerUpdate) {
    this._event = event;
  }

  get _prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ConverterUpgrader extends ethereum.SmartContract {
  static bind(address: Address): ConverterUpgrader {
    return new ConverterUpgrader("ConverterUpgrader", address);
  }

  onlyOwnerCanUpdateRegistry(): boolean {
    let result = super.call(
      "onlyOwnerCanUpdateRegistry",
      "onlyOwnerCanUpdateRegistry():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_onlyOwnerCanUpdateRegistry(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onlyOwnerCanUpdateRegistry",
      "onlyOwnerCanUpdateRegistry():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  prevRegistry(): Address {
    let result = super.call("prevRegistry", "prevRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_prevRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("prevRegistry", "prevRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  etherToken(): Address {
    let result = super.call("etherToken", "etherToken():(address)", []);

    return result[0].toAddress();
  }

  try_etherToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("etherToken", "etherToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newOwner(): Address {
    let result = super.call("newOwner", "newOwner():(address)", []);

    return result[0].toAddress();
  }

  try_newOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("newOwner", "newOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class RestrictRegistryUpdateCall extends ethereum.Call {
  get inputs(): RestrictRegistryUpdateCall__Inputs {
    return new RestrictRegistryUpdateCall__Inputs(this);
  }

  get outputs(): RestrictRegistryUpdateCall__Outputs {
    return new RestrictRegistryUpdateCall__Outputs(this);
  }
}

export class RestrictRegistryUpdateCall__Inputs {
  _call: RestrictRegistryUpdateCall;

  constructor(call: RestrictRegistryUpdateCall) {
    this._call = call;
  }

  get _onlyOwnerCanUpdateRegistry(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class RestrictRegistryUpdateCall__Outputs {
  _call: RestrictRegistryUpdateCall;

  constructor(call: RestrictRegistryUpdateCall) {
    this._call = call;
  }
}

export class UpdateRegistryCall extends ethereum.Call {
  get inputs(): UpdateRegistryCall__Inputs {
    return new UpdateRegistryCall__Inputs(this);
  }

  get outputs(): UpdateRegistryCall__Outputs {
    return new UpdateRegistryCall__Outputs(this);
  }
}

export class UpdateRegistryCall__Inputs {
  _call: UpdateRegistryCall;

  constructor(call: UpdateRegistryCall) {
    this._call = call;
  }
}

export class UpdateRegistryCall__Outputs {
  _call: UpdateRegistryCall;

  constructor(call: UpdateRegistryCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeCall extends ethereum.Call {
  get inputs(): UpgradeCall__Inputs {
    return new UpgradeCall__Inputs(this);
  }

  get outputs(): UpgradeCall__Outputs {
    return new UpgradeCall__Outputs(this);
  }
}

export class UpgradeCall__Inputs {
  _call: UpgradeCall;

  constructor(call: UpgradeCall) {
    this._call = call;
  }

  get _version(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class UpgradeCall__Outputs {
  _call: UpgradeCall;

  constructor(call: UpgradeCall) {
    this._call = call;
  }
}

export class RestoreRegistryCall extends ethereum.Call {
  get inputs(): RestoreRegistryCall__Inputs {
    return new RestoreRegistryCall__Inputs(this);
  }

  get outputs(): RestoreRegistryCall__Outputs {
    return new RestoreRegistryCall__Outputs(this);
  }
}

export class RestoreRegistryCall__Inputs {
  _call: RestoreRegistryCall;

  constructor(call: RestoreRegistryCall) {
    this._call = call;
  }
}

export class RestoreRegistryCall__Outputs {
  _call: RestoreRegistryCall;

  constructor(call: RestoreRegistryCall) {
    this._call = call;
  }
}

export class Upgrade1Call extends ethereum.Call {
  get inputs(): Upgrade1Call__Inputs {
    return new Upgrade1Call__Inputs(this);
  }

  get outputs(): Upgrade1Call__Outputs {
    return new Upgrade1Call__Outputs(this);
  }
}

export class Upgrade1Call__Inputs {
  _call: Upgrade1Call;

  constructor(call: Upgrade1Call) {
    this._call = call;
  }

  get _version(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class Upgrade1Call__Outputs {
  _call: Upgrade1Call;

  constructor(call: Upgrade1Call) {
    this._call = call;
  }
}

export class UpgradeOldCall extends ethereum.Call {
  get inputs(): UpgradeOldCall__Inputs {
    return new UpgradeOldCall__Inputs(this);
  }

  get outputs(): UpgradeOldCall__Outputs {
    return new UpgradeOldCall__Outputs(this);
  }
}

export class UpgradeOldCall__Inputs {
  _call: UpgradeOldCall;

  constructor(call: UpgradeOldCall) {
    this._call = call;
  }

  get _converter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _version(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeOldCall__Outputs {
  _call: UpgradeOldCall;

  constructor(call: UpgradeOldCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _etherToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
