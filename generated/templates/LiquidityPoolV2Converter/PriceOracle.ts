// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PriceOracle__latestRateResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class PriceOracle__latestRateAndUpdateTimeResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class PriceOracle extends ethereum.SmartContract {
  static bind(address: Address): PriceOracle {
    return new PriceOracle("PriceOracle", address);
  }

  tokenA(): Address {
    let result = super.call("tokenA", "tokenA():(address)", []);

    return result[0].toAddress();
  }

  try_tokenA(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenA", "tokenA():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenB(): Address {
    let result = super.call("tokenB", "tokenB():(address)", []);

    return result[0].toAddress();
  }

  try_tokenB(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenB", "tokenB():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenDecimals(param0: Address): i32 {
    let result = super.call("tokenDecimals", "tokenDecimals(address):(uint8)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toI32();
  }

  try_tokenDecimals(param0: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "tokenDecimals",
      "tokenDecimals(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  latestRate(
    _tokenA: Address,
    _tokenB: Address
  ): PriceOracle__latestRateResult {
    let result = super.call(
      "latestRate",
      "latestRate(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_tokenA), ethereum.Value.fromAddress(_tokenB)]
    );

    return new PriceOracle__latestRateResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_latestRate(
    _tokenA: Address,
    _tokenB: Address
  ): ethereum.CallResult<PriceOracle__latestRateResult> {
    let result = super.tryCall(
      "latestRate",
      "latestRate(address,address):(uint256,uint256)",
      [ethereum.Value.fromAddress(_tokenA), ethereum.Value.fromAddress(_tokenB)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PriceOracle__latestRateResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  latestRateAndUpdateTime(
    _tokenA: Address,
    _tokenB: Address
  ): PriceOracle__latestRateAndUpdateTimeResult {
    let result = super.call(
      "latestRateAndUpdateTime",
      "latestRateAndUpdateTime(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_tokenA), ethereum.Value.fromAddress(_tokenB)]
    );

    return new PriceOracle__latestRateAndUpdateTimeResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_latestRateAndUpdateTime(
    _tokenA: Address,
    _tokenB: Address
  ): ethereum.CallResult<PriceOracle__latestRateAndUpdateTimeResult> {
    let result = super.tryCall(
      "latestRateAndUpdateTime",
      "latestRateAndUpdateTime(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_tokenA), ethereum.Value.fromAddress(_tokenB)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PriceOracle__latestRateAndUpdateTimeResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  tokenAOracle(): Address {
    let result = super.call("tokenAOracle", "tokenAOracle():(address)", []);

    return result[0].toAddress();
  }

  try_tokenAOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenAOracle", "tokenAOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastUpdateTime(): BigInt {
    let result = super.call("lastUpdateTime", "lastUpdateTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastUpdateTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastUpdateTime",
      "lastUpdateTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensToOracles(param0: Address): Address {
    let result = super.call(
      "tokensToOracles",
      "tokensToOracles(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_tokensToOracles(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokensToOracles",
      "tokensToOracles(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenBOracle(): Address {
    let result = super.call("tokenBOracle", "tokenBOracle():(address)", []);

    return result[0].toAddress();
  }

  try_tokenBOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenBOracle", "tokenBOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenAOracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tokenBOracle(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
