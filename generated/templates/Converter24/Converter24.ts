// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Conversion extends ethereum.Event {
  get params(): Conversion__Params {
    return new Conversion__Params(this);
  }
}

export class Conversion__Params {
  _event: Conversion;

  constructor(event: Conversion) {
    this._event = event;
  }

  get _fromToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _toToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _trader(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _return(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get _conversionFee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class PriceDataUpdate extends ethereum.Event {
  get params(): PriceDataUpdate__Params {
    return new PriceDataUpdate__Params(this);
  }
}

export class PriceDataUpdate__Params {
  _event: PriceDataUpdate;

  constructor(event: PriceDataUpdate) {
    this._event = event;
  }

  get _connectorToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _connectorBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _connectorWeight(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ConversionFeeUpdate extends ethereum.Event {
  get params(): ConversionFeeUpdate__Params {
    return new ConversionFeeUpdate__Params(this);
  }
}

export class ConversionFeeUpdate__Params {
  _event: ConversionFeeUpdate;

  constructor(event: ConversionFeeUpdate) {
    this._event = event;
  }

  get _prevFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ManagerUpdate extends ethereum.Event {
  get params(): ManagerUpdate__Params {
    return new ManagerUpdate__Params(this);
  }
}

export class ManagerUpdate__Params {
  _event: ManagerUpdate;

  constructor(event: ManagerUpdate) {
    this._event = event;
  }

  get _prevManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnerUpdate extends ethereum.Event {
  get params(): OwnerUpdate__Params {
    return new OwnerUpdate__Params(this);
  }
}

export class OwnerUpdate__Params {
  _event: OwnerUpdate;

  constructor(event: OwnerUpdate) {
    this._event = event;
  }

  get _prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Converter24__connectorsResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: boolean;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: boolean,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class Converter24__getReturnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Converter24__getSaleReturnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Converter24__getCrossConnectorReturnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Converter24__getPurchaseReturnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Converter24__getCrossReserveReturnResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Converter24__reservesResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: boolean;
  value4: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: boolean,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }
}

export class Converter24 extends ethereum.SmartContract {
  static bind(address: Address): Converter24 {
    return new Converter24("Converter24", address);
  }

  connectors(_address: Address): Converter24__connectorsResult {
    let result = super.call(
      "connectors",
      "connectors(address):(uint256,uint32,bool,bool,bool)",
      [ethereum.Value.fromAddress(_address)]
    );

    return new Converter24__connectorsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBoolean()
    );
  }

  try_connectors(
    _address: Address
  ): ethereum.CallResult<Converter24__connectorsResult> {
    let result = super.tryCall(
      "connectors",
      "connectors(address):(uint256,uint32,bool,bool,bool)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Converter24__connectorsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBoolean()
      )
    );
  }

  bancorX(): Address {
    let result = super.call("bancorX", "bancorX():(address)", []);

    return result[0].toAddress();
  }

  try_bancorX(): ethereum.CallResult<Address> {
    let result = super.tryCall("bancorX", "bancorX():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReserveBalance(_reserveToken: Address): BigInt {
    let result = super.call(
      "getReserveBalance",
      "getReserveBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_reserveToken)]
    );

    return result[0].toBigInt();
  }

  try_getReserveBalance(_reserveToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveBalance",
      "getReserveBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_reserveToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  connectorTokens(_index: BigInt): Address {
    let result = super.call(
      "connectorTokens",
      "connectorTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toAddress();
  }

  try_connectorTokens(_index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "connectorTokens",
      "connectorTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReturn(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt
  ): Converter24__getReturnResult {
    let result = super.call(
      "getReturn",
      "getReturn(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return new Converter24__getReturnResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getReturn(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt
  ): ethereum.CallResult<Converter24__getReturnResult> {
    let result = super.tryCall(
      "getReturn",
      "getReturn(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Converter24__getReturnResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  convertInternal(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt,
    _minReturn: BigInt
  ): BigInt {
    let result = super.call(
      "convertInternal",
      "convertInternal(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minReturn)
      ]
    );

    return result[0].toBigInt();
  }

  try_convertInternal(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt,
    _minReturn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convertInternal",
      "convertInternal(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minReturn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReserveRatio(_reserveToken: Address): BigInt {
    let result = super.call(
      "getReserveRatio",
      "getReserveRatio(address):(uint256)",
      [ethereum.Value.fromAddress(_reserveToken)]
    );

    return result[0].toBigInt();
  }

  try_getReserveRatio(_reserveToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReserveRatio",
      "getReserveRatio(address):(uint256)",
      [ethereum.Value.fromAddress(_reserveToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  completeXConversion2(
    _path: Array<Address>,
    _minReturn: BigInt,
    _conversionId: BigInt,
    _signature: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "completeXConversion2",
      "completeXConversion2(address[],uint256,uint256,uint256[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(_path),
        ethereum.Value.fromUnsignedBigInt(_minReturn),
        ethereum.Value.fromUnsignedBigInt(_conversionId),
        ethereum.Value.fromUnsignedBigIntArray(_signature)
      ]
    );

    return result[0].toBigInt();
  }

  try_completeXConversion2(
    _path: Array<Address>,
    _minReturn: BigInt,
    _conversionId: BigInt,
    _signature: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "completeXConversion2",
      "completeXConversion2(address[],uint256,uint256,uint256[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(_path),
        ethereum.Value.fromUnsignedBigInt(_minReturn),
        ethereum.Value.fromUnsignedBigInt(_conversionId),
        ethereum.Value.fromUnsignedBigIntArray(_signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFinalAmount(_amount: BigInt, _magnitude: i32): BigInt {
    let result = super.call(
      "getFinalAmount",
      "getFinalAmount(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_magnitude))
      ]
    );

    return result[0].toBigInt();
  }

  try_getFinalAmount(
    _amount: BigInt,
    _magnitude: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFinalAmount",
      "getFinalAmount(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_magnitude))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  converterType(): string {
    let result = super.call("converterType", "converterType():(string)", []);

    return result[0].toString();
  }

  try_converterType(): ethereum.CallResult<string> {
    let result = super.tryCall("converterType", "converterType():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  newManager(): Address {
    let result = super.call("newManager", "newManager():(address)", []);

    return result[0].toAddress();
  }

  try_newManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("newManager", "newManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  completeXConversion(
    _path: Array<Address>,
    _minReturn: BigInt,
    _conversionId: BigInt,
    _block: BigInt,
    _v: i32,
    _r: Bytes,
    _s: Bytes
  ): BigInt {
    let result = super.call(
      "completeXConversion",
      "completeXConversion(address[],uint256,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(_path),
        ethereum.Value.fromUnsignedBigInt(_minReturn),
        ethereum.Value.fromUnsignedBigInt(_conversionId),
        ethereum.Value.fromUnsignedBigInt(_block),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );

    return result[0].toBigInt();
  }

  try_completeXConversion(
    _path: Array<Address>,
    _minReturn: BigInt,
    _conversionId: BigInt,
    _block: BigInt,
    _v: i32,
    _r: Bytes,
    _s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "completeXConversion",
      "completeXConversion(address[],uint256,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromAddressArray(_path),
        ethereum.Value.fromUnsignedBigInt(_minReturn),
        ethereum.Value.fromUnsignedBigInt(_conversionId),
        ethereum.Value.fromUnsignedBigInt(_block),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  version(): i32 {
    let result = super.call("version", "version():(uint16)", []);

    return result[0].toI32();
  }

  try_version(): ethereum.CallResult<i32> {
    let result = super.tryCall("version", "version():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  conversionFee(): BigInt {
    let result = super.call("conversionFee", "conversionFee():(uint32)", []);

    return result[0].toBigInt();
  }

  try_conversionFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("conversionFee", "conversionFee():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  change(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt,
    _minReturn: BigInt
  ): BigInt {
    let result = super.call(
      "change",
      "change(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minReturn)
      ]
    );

    return result[0].toBigInt();
  }

  try_change(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt,
    _minReturn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "change",
      "change(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minReturn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  prevRegistry(): Address {
    let result = super.call("prevRegistry", "prevRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_prevRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall("prevRegistry", "prevRegistry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  convert2(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt,
    _minReturn: BigInt,
    _affiliateAccount: Address,
    _affiliateFee: BigInt
  ): BigInt {
    let result = super.call(
      "convert2",
      "convert2(address,address,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minReturn),
        ethereum.Value.fromAddress(_affiliateAccount),
        ethereum.Value.fromUnsignedBigInt(_affiliateFee)
      ]
    );

    return result[0].toBigInt();
  }

  try_convert2(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt,
    _minReturn: BigInt,
    _affiliateAccount: Address,
    _affiliateFee: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convert2",
      "convert2(address,address,uint256,uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minReturn),
        ethereum.Value.fromAddress(_affiliateAccount),
        ethereum.Value.fromUnsignedBigInt(_affiliateFee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  connectorTokenCount(): i32 {
    let result = super.call(
      "connectorTokenCount",
      "connectorTokenCount():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_connectorTokenCount(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "connectorTokenCount",
      "connectorTokenCount():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getSaleReturn(
    _reserveToken: Address,
    _sellAmount: BigInt
  ): Converter24__getSaleReturnResult {
    let result = super.call(
      "getSaleReturn",
      "getSaleReturn(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_reserveToken),
        ethereum.Value.fromUnsignedBigInt(_sellAmount)
      ]
    );

    return new Converter24__getSaleReturnResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getSaleReturn(
    _reserveToken: Address,
    _sellAmount: BigInt
  ): ethereum.CallResult<Converter24__getSaleReturnResult> {
    let result = super.tryCall(
      "getSaleReturn",
      "getSaleReturn(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_reserveToken),
        ethereum.Value.fromUnsignedBigInt(_sellAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Converter24__getSaleReturnResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  convert(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt,
    _minReturn: BigInt
  ): BigInt {
    let result = super.call(
      "convert",
      "convert(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minReturn)
      ]
    );

    return result[0].toBigInt();
  }

  try_convert(
    _fromToken: Address,
    _toToken: Address,
    _amount: BigInt,
    _minReturn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "convert",
      "convert(address,address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_fromToken),
        ethereum.Value.fromAddress(_toToken),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minReturn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCrossConnectorReturn(
    _fromConnectorToken: Address,
    _toConnectorToken: Address,
    _amount: BigInt
  ): Converter24__getCrossConnectorReturnResult {
    let result = super.call(
      "getCrossConnectorReturn",
      "getCrossConnectorReturn(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_fromConnectorToken),
        ethereum.Value.fromAddress(_toConnectorToken),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return new Converter24__getCrossConnectorReturnResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCrossConnectorReturn(
    _fromConnectorToken: Address,
    _toConnectorToken: Address,
    _amount: BigInt
  ): ethereum.CallResult<Converter24__getCrossConnectorReturnResult> {
    let result = super.tryCall(
      "getCrossConnectorReturn",
      "getCrossConnectorReturn(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_fromConnectorToken),
        ethereum.Value.fromAddress(_toConnectorToken),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Converter24__getCrossConnectorReturnResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  CONVERTER_CONVERSION_WHITELIST(): BigInt {
    let result = super.call(
      "CONVERTER_CONVERSION_WHITELIST",
      "CONVERTER_CONVERSION_WHITELIST():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_CONVERTER_CONVERSION_WHITELIST(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CONVERTER_CONVERSION_WHITELIST",
      "CONVERTER_CONVERSION_WHITELIST():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxConversionFee(): BigInt {
    let result = super.call(
      "maxConversionFee",
      "maxConversionFee():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxConversionFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxConversionFee",
      "maxConversionFee():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveTokenCount(): i32 {
    let result = super.call(
      "reserveTokenCount",
      "reserveTokenCount():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_reserveTokenCount(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "reserveTokenCount",
      "reserveTokenCount():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getPurchaseReturn(
    _reserveToken: Address,
    _depositAmount: BigInt
  ): Converter24__getPurchaseReturnResult {
    let result = super.call(
      "getPurchaseReturn",
      "getPurchaseReturn(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_reserveToken),
        ethereum.Value.fromUnsignedBigInt(_depositAmount)
      ]
    );

    return new Converter24__getPurchaseReturnResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPurchaseReturn(
    _reserveToken: Address,
    _depositAmount: BigInt
  ): ethereum.CallResult<Converter24__getPurchaseReturnResult> {
    let result = super.tryCall(
      "getPurchaseReturn",
      "getPurchaseReturn(address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_reserveToken),
        ethereum.Value.fromUnsignedBigInt(_depositAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Converter24__getPurchaseReturnResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  conversionsEnabled(): boolean {
    let result = super.call(
      "conversionsEnabled",
      "conversionsEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_conversionsEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "conversionsEnabled",
      "conversionsEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  conversionWhitelist(): Address {
    let result = super.call(
      "conversionWhitelist",
      "conversionWhitelist():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_conversionWhitelist(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "conversionWhitelist",
      "conversionWhitelist():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  adminOnly(): boolean {
    let result = super.call("adminOnly", "adminOnly():(bool)", []);

    return result[0].toBoolean();
  }

  try_adminOnly(): ethereum.CallResult<boolean> {
    let result = super.tryCall("adminOnly", "adminOnly():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getCrossReserveReturn(
    _fromReserveToken: Address,
    _toReserveToken: Address,
    _amount: BigInt
  ): Converter24__getCrossReserveReturnResult {
    let result = super.call(
      "getCrossReserveReturn",
      "getCrossReserveReturn(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_fromReserveToken),
        ethereum.Value.fromAddress(_toReserveToken),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return new Converter24__getCrossReserveReturnResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCrossReserveReturn(
    _fromReserveToken: Address,
    _toReserveToken: Address,
    _amount: BigInt
  ): ethereum.CallResult<Converter24__getCrossReserveReturnResult> {
    let result = super.tryCall(
      "getCrossReserveReturn",
      "getCrossReserveReturn(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(_fromReserveToken),
        ethereum.Value.fromAddress(_toReserveToken),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Converter24__getCrossReserveReturnResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  reserveTokens(param0: BigInt): Address {
    let result = super.call(
      "reserveTokens",
      "reserveTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_reserveTokens(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "reserveTokens",
      "reserveTokens(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newOwner(): Address {
    let result = super.call("newOwner", "newOwner():(address)", []);

    return result[0].toAddress();
  }

  try_newOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("newOwner", "newOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserves(param0: Address): Converter24__reservesResult {
    let result = super.call(
      "reserves",
      "reserves(address):(uint256,uint32,bool,bool,bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Converter24__reservesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBoolean()
    );
  }

  try_reserves(
    param0: Address
  ): ethereum.CallResult<Converter24__reservesResult> {
    let result = super.tryCall(
      "reserves",
      "reserves(address):(uint256,uint32,bool,bool,bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Converter24__reservesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBoolean()
      )
    );
  }

  getConnectorBalance(_connectorToken: Address): BigInt {
    let result = super.call(
      "getConnectorBalance",
      "getConnectorBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_connectorToken)]
    );

    return result[0].toBigInt();
  }

  try_getConnectorBalance(
    _connectorToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getConnectorBalance",
      "getConnectorBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_connectorToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class RestrictRegistryUpdateCall extends ethereum.Call {
  get inputs(): RestrictRegistryUpdateCall__Inputs {
    return new RestrictRegistryUpdateCall__Inputs(this);
  }

  get outputs(): RestrictRegistryUpdateCall__Outputs {
    return new RestrictRegistryUpdateCall__Outputs(this);
  }
}

export class RestrictRegistryUpdateCall__Inputs {
  _call: RestrictRegistryUpdateCall;

  constructor(call: RestrictRegistryUpdateCall) {
    this._call = call;
  }

  get _adminOnly(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class RestrictRegistryUpdateCall__Outputs {
  _call: RestrictRegistryUpdateCall;

  constructor(call: RestrictRegistryUpdateCall) {
    this._call = call;
  }
}

export class UpdateConnectorCall extends ethereum.Call {
  get inputs(): UpdateConnectorCall__Inputs {
    return new UpdateConnectorCall__Inputs(this);
  }

  get outputs(): UpdateConnectorCall__Outputs {
    return new UpdateConnectorCall__Outputs(this);
  }
}

export class UpdateConnectorCall__Inputs {
  _call: UpdateConnectorCall;

  constructor(call: UpdateConnectorCall) {
    this._call = call;
  }

  get _connectorToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _virtualBalance(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateConnectorCall__Outputs {
  _call: UpdateConnectorCall;

  constructor(call: UpdateConnectorCall) {
    this._call = call;
  }
}

export class TransferTokenOwnershipCall extends ethereum.Call {
  get inputs(): TransferTokenOwnershipCall__Inputs {
    return new TransferTokenOwnershipCall__Inputs(this);
  }

  get outputs(): TransferTokenOwnershipCall__Outputs {
    return new TransferTokenOwnershipCall__Outputs(this);
  }
}

export class TransferTokenOwnershipCall__Inputs {
  _call: TransferTokenOwnershipCall;

  constructor(call: TransferTokenOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferTokenOwnershipCall__Outputs {
  _call: TransferTokenOwnershipCall;

  constructor(call: TransferTokenOwnershipCall) {
    this._call = call;
  }
}

export class QuickConvertPrioritizedCall extends ethereum.Call {
  get inputs(): QuickConvertPrioritizedCall__Inputs {
    return new QuickConvertPrioritizedCall__Inputs(this);
  }

  get outputs(): QuickConvertPrioritizedCall__Outputs {
    return new QuickConvertPrioritizedCall__Outputs(this);
  }
}

export class QuickConvertPrioritizedCall__Inputs {
  _call: QuickConvertPrioritizedCall;

  constructor(call: QuickConvertPrioritizedCall) {
    this._call = call;
  }

  get _path(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _block(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class QuickConvertPrioritizedCall__Outputs {
  _call: QuickConvertPrioritizedCall;

  constructor(call: QuickConvertPrioritizedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ConvertInternalCall extends ethereum.Call {
  get inputs(): ConvertInternalCall__Inputs {
    return new ConvertInternalCall__Inputs(this);
  }

  get outputs(): ConvertInternalCall__Outputs {
    return new ConvertInternalCall__Outputs(this);
  }
}

export class ConvertInternalCall__Inputs {
  _call: ConvertInternalCall;

  constructor(call: ConvertInternalCall) {
    this._call = call;
  }

  get _fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _toToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConvertInternalCall__Outputs {
  _call: ConvertInternalCall;

  constructor(call: ConvertInternalCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CompleteXConversion2Call extends ethereum.Call {
  get inputs(): CompleteXConversion2Call__Inputs {
    return new CompleteXConversion2Call__Inputs(this);
  }

  get outputs(): CompleteXConversion2Call__Outputs {
    return new CompleteXConversion2Call__Outputs(this);
  }
}

export class CompleteXConversion2Call__Inputs {
  _call: CompleteXConversion2Call;

  constructor(call: CompleteXConversion2Call) {
    this._call = call;
  }

  get _path(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _conversionId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _signature(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class CompleteXConversion2Call__Outputs {
  _call: CompleteXConversion2Call;

  constructor(call: CompleteXConversion2Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AcceptTokenOwnershipCall extends ethereum.Call {
  get inputs(): AcceptTokenOwnershipCall__Inputs {
    return new AcceptTokenOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptTokenOwnershipCall__Outputs {
    return new AcceptTokenOwnershipCall__Outputs(this);
  }
}

export class AcceptTokenOwnershipCall__Inputs {
  _call: AcceptTokenOwnershipCall;

  constructor(call: AcceptTokenOwnershipCall) {
    this._call = call;
  }
}

export class AcceptTokenOwnershipCall__Outputs {
  _call: AcceptTokenOwnershipCall;

  constructor(call: AcceptTokenOwnershipCall) {
    this._call = call;
  }
}

export class AddConnectorCall extends ethereum.Call {
  get inputs(): AddConnectorCall__Inputs {
    return new AddConnectorCall__Inputs(this);
  }

  get outputs(): AddConnectorCall__Outputs {
    return new AddConnectorCall__Outputs(this);
  }
}

export class AddConnectorCall__Inputs {
  _call: AddConnectorCall;

  constructor(call: AddConnectorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AddConnectorCall__Outputs {
  _call: AddConnectorCall;

  constructor(call: AddConnectorCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class WithdrawFromTokenCall extends ethereum.Call {
  get inputs(): WithdrawFromTokenCall__Inputs {
    return new WithdrawFromTokenCall__Inputs(this);
  }

  get outputs(): WithdrawFromTokenCall__Outputs {
    return new WithdrawFromTokenCall__Outputs(this);
  }
}

export class WithdrawFromTokenCall__Inputs {
  _call: WithdrawFromTokenCall;

  constructor(call: WithdrawFromTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawFromTokenCall__Outputs {
  _call: WithdrawFromTokenCall;

  constructor(call: WithdrawFromTokenCall) {
    this._call = call;
  }
}

export class UpdateRegistryCall extends ethereum.Call {
  get inputs(): UpdateRegistryCall__Inputs {
    return new UpdateRegistryCall__Inputs(this);
  }

  get outputs(): UpdateRegistryCall__Outputs {
    return new UpdateRegistryCall__Outputs(this);
  }
}

export class UpdateRegistryCall__Inputs {
  _call: UpdateRegistryCall;

  constructor(call: UpdateRegistryCall) {
    this._call = call;
  }
}

export class UpdateRegistryCall__Outputs {
  _call: UpdateRegistryCall;

  constructor(call: UpdateRegistryCall) {
    this._call = call;
  }
}

export class SetConversionWhitelistCall extends ethereum.Call {
  get inputs(): SetConversionWhitelistCall__Inputs {
    return new SetConversionWhitelistCall__Inputs(this);
  }

  get outputs(): SetConversionWhitelistCall__Outputs {
    return new SetConversionWhitelistCall__Outputs(this);
  }
}

export class SetConversionWhitelistCall__Inputs {
  _call: SetConversionWhitelistCall;

  constructor(call: SetConversionWhitelistCall) {
    this._call = call;
  }

  get _whitelist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetConversionWhitelistCall__Outputs {
  _call: SetConversionWhitelistCall;

  constructor(call: SetConversionWhitelistCall) {
    this._call = call;
  }
}

export class CompleteXConversionCall extends ethereum.Call {
  get inputs(): CompleteXConversionCall__Inputs {
    return new CompleteXConversionCall__Inputs(this);
  }

  get outputs(): CompleteXConversionCall__Outputs {
    return new CompleteXConversionCall__Outputs(this);
  }
}

export class CompleteXConversionCall__Inputs {
  _call: CompleteXConversionCall;

  constructor(call: CompleteXConversionCall) {
    this._call = call;
  }

  get _path(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _conversionId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _block(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get _s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class CompleteXConversionCall__Outputs {
  _call: CompleteXConversionCall;

  constructor(call: CompleteXConversionCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawTokensCall extends ethereum.Call {
  get inputs(): WithdrawTokensCall__Inputs {
    return new WithdrawTokensCall__Inputs(this);
  }

  get outputs(): WithdrawTokensCall__Outputs {
    return new WithdrawTokensCall__Outputs(this);
  }
}

export class WithdrawTokensCall__Inputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawTokensCall__Outputs {
  _call: WithdrawTokensCall;

  constructor(call: WithdrawTokensCall) {
    this._call = call;
  }
}

export class ChangeCall extends ethereum.Call {
  get inputs(): ChangeCall__Inputs {
    return new ChangeCall__Inputs(this);
  }

  get outputs(): ChangeCall__Outputs {
    return new ChangeCall__Outputs(this);
  }
}

export class ChangeCall__Inputs {
  _call: ChangeCall;

  constructor(call: ChangeCall) {
    this._call = call;
  }

  get _fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _toToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ChangeCall__Outputs {
  _call: ChangeCall;

  constructor(call: ChangeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddReserveCall extends ethereum.Call {
  get inputs(): AddReserveCall__Inputs {
    return new AddReserveCall__Inputs(this);
  }

  get outputs(): AddReserveCall__Outputs {
    return new AddReserveCall__Outputs(this);
  }
}

export class AddReserveCall__Inputs {
  _call: AddReserveCall;

  constructor(call: AddReserveCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ratio(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddReserveCall__Outputs {
  _call: AddReserveCall;

  constructor(call: AddReserveCall) {
    this._call = call;
  }
}

export class Convert2Call extends ethereum.Call {
  get inputs(): Convert2Call__Inputs {
    return new Convert2Call__Inputs(this);
  }

  get outputs(): Convert2Call__Outputs {
    return new Convert2Call__Outputs(this);
  }
}

export class Convert2Call__Inputs {
  _call: Convert2Call;

  constructor(call: Convert2Call) {
    this._call = call;
  }

  get _fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _toToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _affiliateAccount(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _affiliateFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class Convert2Call__Outputs {
  _call: Convert2Call;

  constructor(call: Convert2Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ConvertCall extends ethereum.Call {
  get inputs(): ConvertCall__Inputs {
    return new ConvertCall__Inputs(this);
  }

  get outputs(): ConvertCall__Outputs {
    return new ConvertCall__Outputs(this);
  }
}

export class ConvertCall__Inputs {
  _call: ConvertCall;

  constructor(call: ConvertCall) {
    this._call = call;
  }

  get _fromToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _toToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConvertCall__Outputs {
  _call: ConvertCall;

  constructor(call: ConvertCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class UpdateReserveVirtualBalanceCall extends ethereum.Call {
  get inputs(): UpdateReserveVirtualBalanceCall__Inputs {
    return new UpdateReserveVirtualBalanceCall__Inputs(this);
  }

  get outputs(): UpdateReserveVirtualBalanceCall__Outputs {
    return new UpdateReserveVirtualBalanceCall__Outputs(this);
  }
}

export class UpdateReserveVirtualBalanceCall__Inputs {
  _call: UpdateReserveVirtualBalanceCall;

  constructor(call: UpdateReserveVirtualBalanceCall) {
    this._call = call;
  }

  get _reserveToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _virtualBalance(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateReserveVirtualBalanceCall__Outputs {
  _call: UpdateReserveVirtualBalanceCall;

  constructor(call: UpdateReserveVirtualBalanceCall) {
    this._call = call;
  }
}

export class QuickConvertPrioritized2Call extends ethereum.Call {
  get inputs(): QuickConvertPrioritized2Call__Inputs {
    return new QuickConvertPrioritized2Call__Inputs(this);
  }

  get outputs(): QuickConvertPrioritized2Call__Outputs {
    return new QuickConvertPrioritized2Call__Outputs(this);
  }
}

export class QuickConvertPrioritized2Call__Inputs {
  _call: QuickConvertPrioritized2Call;

  constructor(call: QuickConvertPrioritized2Call) {
    this._call = call;
  }

  get _path(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _signature(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _affiliateAccount(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _affiliateFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class QuickConvertPrioritized2Call__Outputs {
  _call: QuickConvertPrioritized2Call;

  constructor(call: QuickConvertPrioritized2Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RestoreRegistryCall extends ethereum.Call {
  get inputs(): RestoreRegistryCall__Inputs {
    return new RestoreRegistryCall__Inputs(this);
  }

  get outputs(): RestoreRegistryCall__Outputs {
    return new RestoreRegistryCall__Outputs(this);
  }
}

export class RestoreRegistryCall__Inputs {
  _call: RestoreRegistryCall;

  constructor(call: RestoreRegistryCall) {
    this._call = call;
  }
}

export class RestoreRegistryCall__Outputs {
  _call: RestoreRegistryCall;

  constructor(call: RestoreRegistryCall) {
    this._call = call;
  }
}

export class AcceptManagementCall extends ethereum.Call {
  get inputs(): AcceptManagementCall__Inputs {
    return new AcceptManagementCall__Inputs(this);
  }

  get outputs(): AcceptManagementCall__Outputs {
    return new AcceptManagementCall__Outputs(this);
  }
}

export class AcceptManagementCall__Inputs {
  _call: AcceptManagementCall;

  constructor(call: AcceptManagementCall) {
    this._call = call;
  }
}

export class AcceptManagementCall__Outputs {
  _call: AcceptManagementCall;

  constructor(call: AcceptManagementCall) {
    this._call = call;
  }
}

export class FundCall extends ethereum.Call {
  get inputs(): FundCall__Inputs {
    return new FundCall__Inputs(this);
  }

  get outputs(): FundCall__Outputs {
    return new FundCall__Outputs(this);
  }
}

export class FundCall__Inputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FundCall__Outputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }
}

export class UpgradeCall extends ethereum.Call {
  get inputs(): UpgradeCall__Inputs {
    return new UpgradeCall__Inputs(this);
  }

  get outputs(): UpgradeCall__Outputs {
    return new UpgradeCall__Outputs(this);
  }
}

export class UpgradeCall__Inputs {
  _call: UpgradeCall;

  constructor(call: UpgradeCall) {
    this._call = call;
  }
}

export class UpgradeCall__Outputs {
  _call: UpgradeCall;

  constructor(call: UpgradeCall) {
    this._call = call;
  }
}

export class SetBancorXCall extends ethereum.Call {
  get inputs(): SetBancorXCall__Inputs {
    return new SetBancorXCall__Inputs(this);
  }

  get outputs(): SetBancorXCall__Outputs {
    return new SetBancorXCall__Outputs(this);
  }
}

export class SetBancorXCall__Inputs {
  _call: SetBancorXCall;

  constructor(call: SetBancorXCall) {
    this._call = call;
  }

  get _bancorX(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBancorXCall__Outputs {
  _call: SetBancorXCall;

  constructor(call: SetBancorXCall) {
    this._call = call;
  }
}

export class QuickConvert2Call extends ethereum.Call {
  get inputs(): QuickConvert2Call__Inputs {
    return new QuickConvert2Call__Inputs(this);
  }

  get outputs(): QuickConvert2Call__Outputs {
    return new QuickConvert2Call__Outputs(this);
  }
}

export class QuickConvert2Call__Inputs {
  _call: QuickConvert2Call;

  constructor(call: QuickConvert2Call) {
    this._call = call;
  }

  get _path(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _affiliateAccount(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _affiliateFee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class QuickConvert2Call__Outputs {
  _call: QuickConvert2Call;

  constructor(call: QuickConvert2Call) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferManagementCall extends ethereum.Call {
  get inputs(): TransferManagementCall__Inputs {
    return new TransferManagementCall__Inputs(this);
  }

  get outputs(): TransferManagementCall__Outputs {
    return new TransferManagementCall__Outputs(this);
  }
}

export class TransferManagementCall__Inputs {
  _call: TransferManagementCall;

  constructor(call: TransferManagementCall) {
    this._call = call;
  }

  get _newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferManagementCall__Outputs {
  _call: TransferManagementCall;

  constructor(call: TransferManagementCall) {
    this._call = call;
  }
}

export class SetConversionFeeCall extends ethereum.Call {
  get inputs(): SetConversionFeeCall__Inputs {
    return new SetConversionFeeCall__Inputs(this);
  }

  get outputs(): SetConversionFeeCall__Outputs {
    return new SetConversionFeeCall__Outputs(this);
  }
}

export class SetConversionFeeCall__Inputs {
  _call: SetConversionFeeCall;

  constructor(call: SetConversionFeeCall) {
    this._call = call;
  }

  get _conversionFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetConversionFeeCall__Outputs {
  _call: SetConversionFeeCall;

  constructor(call: SetConversionFeeCall) {
    this._call = call;
  }
}

export class QuickConvertCall extends ethereum.Call {
  get inputs(): QuickConvertCall__Inputs {
    return new QuickConvertCall__Inputs(this);
  }

  get outputs(): QuickConvertCall__Outputs {
    return new QuickConvertCall__Outputs(this);
  }
}

export class QuickConvertCall__Inputs {
  _call: QuickConvertCall;

  constructor(call: QuickConvertCall) {
    this._call = call;
  }

  get _path(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _minReturn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class QuickConvertCall__Outputs {
  _call: QuickConvertCall;

  constructor(call: QuickConvertCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ClaimTokensCall extends ethereum.Call {
  get inputs(): ClaimTokensCall__Inputs {
    return new ClaimTokensCall__Inputs(this);
  }

  get outputs(): ClaimTokensCall__Outputs {
    return new ClaimTokensCall__Outputs(this);
  }
}

export class ClaimTokensCall__Inputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ClaimTokensCall__Outputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _registry(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _maxConversionFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _reserveToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _reserveRatio(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
