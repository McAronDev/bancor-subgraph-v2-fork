// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Converter extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Converter entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Converter entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Converter", id.toString(), this);
  }

  static load(id: string): Converter | null {
    return store.get("Converter", id) as Converter | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get activated(): boolean {
    let value = this.get("activated");
    return value.toBoolean();
  }

  set activated(value: boolean) {
    this.set("activated", Value.fromBoolean(value));
  }

  get anchor(): string {
    let value = this.get("anchor");
    return value.toString();
  }

  set anchor(value: string) {
    this.set("anchor", Value.fromString(value));
  }

  get conversionFee(): BigDecimal {
    let value = this.get("conversionFee");
    return value.toBigDecimal();
  }

  set conversionFee(value: BigDecimal) {
    this.set("conversionFee", Value.fromBigDecimal(value));
  }

  get factory(): string {
    let value = this.get("factory");
    return value.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get priceOracle(): string | null {
    let value = this.get("priceOracle");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set priceOracle(value: string | null) {
    if (value === null) {
      this.unset("priceOracle");
    } else {
      this.set("priceOracle", Value.fromString(value as string));
    }
  }

  get platform(): string {
    let value = this.get("platform");
    return value.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }

  get type(): BigInt {
    let value = this.get("type");
    return value.toBigInt();
  }

  set type(value: BigInt) {
    this.set("type", Value.fromBigInt(value));
  }

  get version(): BigInt {
    let value = this.get("version");
    return value.toBigInt();
  }

  set version(value: BigInt) {
    this.set("version", Value.fromBigInt(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtTransaction(): string {
    let value = this.get("createdAtTransaction");
    return value.toString();
  }

  set createdAtTransaction(value: string) {
    this.set("createdAtTransaction", Value.fromString(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get createdAtLogIndex(): BigInt {
    let value = this.get("createdAtLogIndex");
    return value.toBigInt();
  }

  set createdAtLogIndex(value: BigInt) {
    this.set("createdAtLogIndex", Value.fromBigInt(value));
  }

  get upgradedTo(): string | null {
    let value = this.get("upgradedTo");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set upgradedTo(value: string | null) {
    if (value === null) {
      this.unset("upgradedTo");
    } else {
      this.set("upgradedTo", Value.fromString(value as string));
    }
  }

  get upgradedFrom(): string | null {
    let value = this.get("upgradedFrom");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set upgradedFrom(value: string | null) {
    if (value === null) {
      this.unset("upgradedFrom");
    } else {
      this.set("upgradedFrom", Value.fromString(value as string));
    }
  }

  get numSwaps(): BigInt {
    let value = this.get("numSwaps");
    return value.toBigInt();
  }

  set numSwaps(value: BigInt) {
    this.set("numSwaps", Value.fromBigInt(value));
  }

  get balances(): Array<string> {
    let value = this.get("balances");
    return value.toStringArray();
  }

  set balances(value: Array<string>) {
    this.set("balances", Value.fromStringArray(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get volumes(): Array<string> {
    let value = this.get("volumes");
    return value.toStringArray();
  }

  set volumes(value: Array<string>) {
    this.set("volumes", Value.fromStringArray(value));
  }

  get poolTokens(): Array<string> {
    let value = this.get("poolTokens");
    return value.toStringArray();
  }

  set poolTokens(value: Array<string>) {
    this.set("poolTokens", Value.fromStringArray(value));
  }
}

export class ConverterBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ConverterBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ConverterBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ConverterBalance", id.toString(), this);
  }

  static load(id: string): ConverterBalance | null {
    return store.get("ConverterBalance", id) as ConverterBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get converter(): string {
    let value = this.get("converter");
    return value.toString();
  }

  set converter(value: string) {
    this.set("converter", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get poolToken(): string | null {
    let value = this.get("poolToken");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set poolToken(value: string | null) {
    if (value === null) {
      this.unset("poolToken");
    } else {
      this.set("poolToken", Value.fromString(value as string));
    }
  }

  get stakedAmount(): BigDecimal {
    let value = this.get("stakedAmount");
    return value.toBigDecimal();
  }

  set stakedAmount(value: BigDecimal) {
    this.set("stakedAmount", Value.fromBigDecimal(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get weight(): BigDecimal {
    let value = this.get("weight");
    return value.toBigDecimal();
  }

  set weight(value: BigDecimal) {
    this.set("weight", Value.fromBigDecimal(value));
  }
}

export class LiquidityProviderBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save LiquidityProviderBalance entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save LiquidityProviderBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("LiquidityProviderBalance", id.toString(), this);
  }

  static load(id: string): LiquidityProviderBalance | null {
    return store.get(
      "LiquidityProviderBalance",
      id
    ) as LiquidityProviderBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get provider(): string {
    let value = this.get("provider");
    return value.toString();
  }

  set provider(value: string) {
    this.set("provider", Value.fromString(value));
  }

  get poolToken(): string {
    let value = this.get("poolToken");
    return value.toString();
  }

  set poolToken(value: string) {
    this.set("poolToken", Value.fromString(value));
  }

  get poolTokenAmount(): BigDecimal {
    let value = this.get("poolTokenAmount");
    return value.toBigDecimal();
  }

  set poolTokenAmount(value: BigDecimal) {
    this.set("poolTokenAmount", Value.fromBigDecimal(value));
  }
}

export class VolumeStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VolumeStat entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VolumeStat entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VolumeStat", id.toString(), this);
  }

  static load(id: string): VolumeStat | null {
    return store.get("VolumeStat", id) as VolumeStat | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get converter(): string | null {
    let value = this.get("converter");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set converter(value: string | null) {
    if (value === null) {
      this.unset("converter");
    } else {
      this.set("converter", Value.fromString(value as string));
    }
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get sellVolume(): BigDecimal {
    let value = this.get("sellVolume");
    return value.toBigDecimal();
  }

  set sellVolume(value: BigDecimal) {
    this.set("sellVolume", Value.fromBigDecimal(value));
  }

  get buyVolume(): BigDecimal {
    let value = this.get("buyVolume");
    return value.toBigDecimal();
  }

  set buyVolume(value: BigDecimal) {
    this.set("buyVolume", Value.fromBigDecimal(value));
  }

  get totalVolume(): BigDecimal {
    let value = this.get("totalVolume");
    return value.toBigDecimal();
  }

  set totalVolume(value: BigDecimal) {
    this.set("totalVolume", Value.fromBigDecimal(value));
  }

  get platform(): string {
    let value = this.get("platform");
    return value.toString();
  }

  set platform(value: string) {
    this.set("platform", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get converterVolumes(): Array<string> {
    let value = this.get("converterVolumes");
    return value.toStringArray();
  }

  set converterVolumes(value: Array<string>) {
    this.set("converterVolumes", Value.fromStringArray(value));
  }
}

export class PoolToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolToken", id.toString(), this);
  }

  static load(id: string): PoolToken | null {
    return store.get("PoolToken", id) as PoolToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get converter(): string {
    let value = this.get("converter");
    return value.toString();
  }

  set converter(value: string) {
    this.set("converter", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    return value.toBigInt();
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }

  get supply(): BigDecimal {
    let value = this.get("supply");
    return value.toBigDecimal();
  }

  set supply(value: BigDecimal) {
    this.set("supply", Value.fromBigDecimal(value));
  }

  get shareValue(): BigDecimal {
    let value = this.get("shareValue");
    return value.toBigDecimal();
  }

  set shareValue(value: BigDecimal) {
    this.set("shareValue", Value.fromBigDecimal(value));
  }

  get shareValueEth(): BigDecimal {
    let value = this.get("shareValueEth");
    return value.toBigDecimal();
  }

  set shareValueEth(value: BigDecimal) {
    this.set("shareValueEth", Value.fromBigDecimal(value));
  }

  get underlyingToken(): string {
    let value = this.get("underlyingToken");
    return value.toString();
  }

  set underlyingToken(value: string) {
    this.set("underlyingToken", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get swaps(): Array<string> {
    let value = this.get("swaps");
    return value.toStringArray();
  }

  set swaps(value: Array<string>) {
    this.set("swaps", Value.fromStringArray(value));
  }

  get liquidity(): Array<string> {
    let value = this.get("liquidity");
    return value.toStringArray();
  }

  set liquidity(value: Array<string>) {
    this.set("liquidity", Value.fromStringArray(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get converter(): string {
    let value = this.get("converter");
    return value.toString();
  }

  set converter(value: string) {
    this.set("converter", Value.fromString(value));
  }

  get conversionFee(): BigDecimal {
    let value = this.get("conversionFee");
    return value.toBigDecimal();
  }

  set conversionFee(value: BigDecimal) {
    this.set("conversionFee", Value.fromBigDecimal(value));
  }

  get fromToken(): string {
    let value = this.get("fromToken");
    return value.toString();
  }

  set fromToken(value: string) {
    this.set("fromToken", Value.fromString(value));
  }

  get fromAmount(): BigDecimal {
    let value = this.get("fromAmount");
    return value.toBigDecimal();
  }

  set fromAmount(value: BigDecimal) {
    this.set("fromAmount", Value.fromBigDecimal(value));
  }

  get toToken(): string {
    let value = this.get("toToken");
    return value.toString();
  }

  set toToken(value: string) {
    this.set("toToken", Value.fromString(value));
  }

  get toAmount(): BigDecimal {
    let value = this.get("toAmount");
    return value.toBigDecimal();
  }

  set toAmount(value: BigDecimal) {
    this.set("toAmount", Value.fromBigDecimal(value));
  }

  get price(): BigDecimal {
    let value = this.get("price");
    return value.toBigDecimal();
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }

  get trader(): string {
    let value = this.get("trader");
    return value.toString();
  }

  set trader(value: string) {
    this.set("trader", Value.fromString(value));
  }

  get txTo(): string {
    let value = this.get("txTo");
    return value.toString();
  }

  set txTo(value: string) {
    this.set("txTo", Value.fromString(value));
  }

  get txFrom(): string {
    let value = this.get("txFrom");
    return value.toString();
  }

  set txFrom(value: string) {
    this.set("txFrom", Value.fromString(value));
  }

  get createdAtTimestamp(): BigInt {
    let value = this.get("createdAtTimestamp");
    return value.toBigInt();
  }

  set createdAtTimestamp(value: BigInt) {
    this.set("createdAtTimestamp", Value.fromBigInt(value));
  }

  get createdAtTransaction(): string {
    let value = this.get("createdAtTransaction");
    return value.toString();
  }

  set createdAtTransaction(value: string) {
    this.set("createdAtTransaction", Value.fromString(value));
  }

  get createdAtBlockNumber(): BigInt {
    let value = this.get("createdAtBlockNumber");
    return value.toBigInt();
  }

  set createdAtBlockNumber(value: BigInt) {
    this.set("createdAtBlockNumber", Value.fromBigInt(value));
  }

  get createdAtLogIndex(): BigInt {
    let value = this.get("createdAtLogIndex");
    return value.toBigInt();
  }

  set createdAtLogIndex(value: BigInt) {
    this.set("createdAtLogIndex", Value.fromBigInt(value));
  }
}

export class PlatformStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PlatformStat entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PlatformStat entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PlatformStat", id.toString(), this);
  }

  static load(id: string): PlatformStat | null {
    return store.get("PlatformStat", id) as PlatformStat | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numActiveConverters(): BigInt {
    let value = this.get("numActiveConverters");
    return value.toBigInt();
  }

  set numActiveConverters(value: BigInt) {
    this.set("numActiveConverters", Value.fromBigInt(value));
  }

  get numConvertersTracked(): BigInt {
    let value = this.get("numConvertersTracked");
    return value.toBigInt();
  }

  set numConvertersTracked(value: BigInt) {
    this.set("numConvertersTracked", Value.fromBigInt(value));
  }

  get swaps(): BigInt {
    let value = this.get("swaps");
    return value.toBigInt();
  }

  set swaps(value: BigInt) {
    this.set("swaps", Value.fromBigInt(value));
  }

  get converters(): Array<string> {
    let value = this.get("converters");
    return value.toStringArray();
  }

  set converters(value: Array<string>) {
    this.set("converters", Value.fromStringArray(value));
  }

  get converterVolumes(): Array<string> {
    let value = this.get("converterVolumes");
    return value.toStringArray();
  }

  set converterVolumes(value: Array<string>) {
    this.set("converterVolumes", Value.fromStringArray(value));
  }
}
